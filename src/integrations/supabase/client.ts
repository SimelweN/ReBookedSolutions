// This file is automatically generated. Do not edit it directly.
import { createClient } from "@supabase/supabase-js";
import type { Database } from "./types";

import { ENV } from "@/config/environment";

// Validate Supabase configuration before creating client
const validateSupabaseConfig = () => {
  if (!ENV.VITE_SUPABASE_URL || ENV.VITE_SUPABASE_URL.trim() === "") {
    throw new Error(
      "VITE_SUPABASE_URL is required. Please set this environment variable.",
    );
  }

  if (!ENV.VITE_SUPABASE_ANON_KEY || ENV.VITE_SUPABASE_ANON_KEY.trim() === "") {
    throw new Error(
      "VITE_SUPABASE_ANON_KEY is required. Please set this environment variable.",
    );
  }

  // Basic URL validation
  try {
    new URL(ENV.VITE_SUPABASE_URL);
  } catch {
    throw new Error(
      `Invalid VITE_SUPABASE_URL: "${ENV.VITE_SUPABASE_URL}". Must be a valid URL.`,
    );
  }

  // Validate API key format (should be a JWT token)
  if (!ENV.VITE_SUPABASE_ANON_KEY.startsWith("eyJ")) {
    console.error(
      "❌ Invalid Supabase API key format. Key should start with 'eyJ'",
    );
    console.error(
      "Current key starts with:",
      ENV.VITE_SUPABASE_ANON_KEY.substring(0, 10),
    );
    throw new Error(
      "Invalid VITE_SUPABASE_ANON_KEY format. Should be a JWT token starting with 'eyJ'.",
    );
  }
};

// Validate configuration with graceful fallback
try {
  validateSupabaseConfig();
} catch (configError) {
  console.warn("⚠️ Supabase configuration issue:", configError);
  // In development, we can continue with limited functionality
  if (import.meta.env.DEV) {
    console.warn(
      "⚠️ Continuing with limited functionality in development mode",
    );
  }
}

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Clean the API key (remove any leading = signs that might have been added by accident)
const cleanApiKey = ENV.VITE_SUPABASE_ANON_KEY.replace(/^=+/, "");

// Store original fetch before FullStory can override it
const originalFetch = window.fetch;

// Create a FullStory-resistant fetch function
const resistantFetch = (url: RequestInfo | URL, options?: RequestInit) => {
  // Try to use the original fetch first
  if (originalFetch && originalFetch !== window.fetch) {
    return originalFetch(url, options);
  }

  // Fallback: Use XMLHttpRequest if fetch is compromised
  return new Promise<Response>((resolve, reject) => {
    const xhr = new XMLHttpRequest();
    const method = options?.method || "GET";

    xhr.open(method, url.toString());

    // Set headers
    if (options?.headers) {
      const headers = new Headers(options.headers);
      headers.forEach((value, key) => {
        xhr.setRequestHeader(key, value);
      });
    }

    xhr.onload = () => {
      const response = new Response(xhr.responseText, {
        status: xhr.status,
        statusText: xhr.statusText,
        headers: new Headers(
          xhr
            .getAllResponseHeaders()
            .split("\r\n")
            .reduce(
              (acc, line) => {
                const [key, value] = line.split(": ");
                if (key && value) acc[key] = value;
                return acc;
              },
              {} as Record<string, string>,
            ),
        ),
      });
      resolve(response);
    };

    xhr.onerror = () => reject(new Error("Network request failed"));
    xhr.ontimeout = () => reject(new Error("Request timeout"));

    xhr.timeout = 10000; // 10 second timeout
    xhr.send(options?.body);
  });
};

export const supabase = createClient<Database>(
  ENV.VITE_SUPABASE_URL,
  cleanApiKey,
  {
    auth: {
      autoRefreshToken: true,
      persistSession: true,
      detectSessionInUrl: true,
      flowType: "pkce",
      // Better error handling for failed auth attempts
      debug: import.meta.env.DEV,
    },
    global: {
      fetch: resistantFetch,
    },
  },
);

// Debug connection on client creation
if (import.meta.env.DEV) {
  console.log("🔗 Supabase client initialized with FullStory-resistant fetch");
  console.log("URL:", ENV.VITE_SUPABASE_URL);
  console.log("Key starts with:", cleanApiKey.substring(0, 20) + "...");
}
