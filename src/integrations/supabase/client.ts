// This file is automatically generated. Do not edit it directly.
import { createClient } from "@supabase/supabase-js";
import type { Database } from "./types";

import { ENV } from "@/config/environment";

// Validate Supabase configuration before creating client
const validateSupabaseConfig = () => {
  if (!ENV.VITE_SUPABASE_URL || ENV.VITE_SUPABASE_URL.trim() === "") {
    throw new Error(
      "VITE_SUPABASE_URL is required. Please set this environment variable.",
    );
  }

  if (!ENV.VITE_SUPABASE_ANON_KEY || ENV.VITE_SUPABASE_ANON_KEY.trim() === "") {
    throw new Error(
      "VITE_SUPABASE_ANON_KEY is required. Please set this environment variable.",
    );
  }

  // Basic URL validation
  try {
    new URL(ENV.VITE_SUPABASE_URL);
  } catch {
    throw new Error(
      `Invalid VITE_SUPABASE_URL: "${ENV.VITE_SUPABASE_URL}". Must be a valid URL.`,
    );
  }

  // Validate API key format (should be a JWT token)
  if (!ENV.VITE_SUPABASE_ANON_KEY.startsWith("eyJ")) {
    console.error(
      "❌ Invalid Supabase API key format. Key should start with 'eyJ'",
    );
    console.error(
      "Current key starts with:",
      ENV.VITE_SUPABASE_ANON_KEY.substring(0, 10),
    );
    throw new Error(
      "Invalid VITE_SUPABASE_ANON_KEY format. Should be a JWT token starting with 'eyJ'.",
    );
  }
};

// Validate configuration with graceful fallback
try {
  validateSupabaseConfig();
} catch (configError) {
  console.warn("⚠️ Supabase configuration issue:", configError);
  // In development, we can continue with limited functionality
  if (import.meta.env.DEV) {
    console.warn(
      "⚠️ Continuing with limited functionality in development mode",
    );
  }
}

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Clean the API key (remove any leading = signs that might have been added by accident)
const cleanApiKey = ENV.VITE_SUPABASE_ANON_KEY.replace(/^=+/, "");

export const supabase = createClient<Database>(
  ENV.VITE_SUPABASE_URL,
  cleanApiKey,
  {
    auth: {
      autoRefreshToken: true,
      persistSession: true,
      detectSessionInUrl: true,
      flowType: "pkce",
      // Better error handling for failed auth attempts
      debug: import.meta.env.DEV,
    },
    global: {
      // Add timeout to prevent hanging
      fetch: (url: RequestInfo | URL, options?: RequestInit) => {
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), 10000); // 10 second timeout

        return fetch(url, {
          ...options,
          signal: controller.signal,
        }).finally(() => clearTimeout(timeoutId));
      },
    },
  },
);
